// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"tdl/controller"
	"tdl/dao"
	"tdl/dao/cache"
	"tdl/pkg/client"
	"tdl/pkg/core"
	"tdl/svc"
)

// Injectors from wire.go:

func NewInjector() (*core.AppProvider, error) {
	engine := controller.NewGinServer()
	db := client.NewMySQLClient()
	userRepo := dao.NewUserRepo(db)
	userService := &svc.UserService{
		UserRepo: userRepo,
	}
	user := &controller.User{
		UserService: userService,
	}
	dbRepo := dao.NewDbRepository(db)
	redisClient := client.NewRedisClient()
	taskCache := cache.NewTaskCache(redisClient)
	elasticClient, err := client.NewEsClient()
	if err != nil {
		return nil, err
	}
	esRepo := dao.NewEsRepo(elasticClient)
	mongoClient := client.NewMongoDbClient()
	logRepository := dao.NewLogRepository(mongoClient)
	connection := client.NewRabbitmqClient()
	rabbitMQProducer, err := dao.NewRabbitMQProducer(connection)
	if err != nil {
		return nil, err
	}
	taskService := &svc.TaskService{
		TaskRepo:         dbRepo,
		TaskCache:        taskCache,
		TaskEsRepo:       esRepo,
		LogRepo:          logRepository,
		ReminderProducer: rabbitMQProducer,
	}
	task := &controller.Task{
		TaskService: taskService,
	}
	controllers := &controller.Controllers{
		User: user,
		Task: task,
	}
	reminderConsumer, err := dao.NewReminderConsumer(connection, mongoClient)
	if err != nil {
		return nil, err
	}
	appProvider := &core.AppProvider{
		Engine:           engine,
		Controllers:      controllers,
		RabbitMQConsumer: reminderConsumer,
	}
	return appProvider, nil
}
